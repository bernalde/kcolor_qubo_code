#%%
import itertools
import os
import pickle
import random
import statistics
import time
from collections import Counter

import dimod
#DWave Tools
import dwave_networkx as dnx
import matplotlib.pyplot as plt
import minorminer as mm
import neal
import networkx as nx
import numpy as np
import pandas as pd
from dimod.reference.samplers import ExactSolver
from dwave.system import (DWaveSampler, EmbeddingComposite,
                          FixedEmbeddingComposite)

import optimization.mirp_encoding.QUBOTools as qbt

# Formulations
from stable_set_formulations import laserre, proposed


def annealing():

    TEST = True
    chain_factor = 1
    annealing_time = 20  # Microseconds

    # Store the results in csv files
    dir_path = os.path.dirname(os.path.abspath(__file__))
    results_path = os.path.join(dir_path, "results/annealing/")
    if not(os.path.exists(results_path)):
        print('Results directory ' + results_path +
            ' does not exist. We will create it.')
        os.makedirs(results_path)

    if TEST:
        file_name = instance + '_annealing_c' + str(chain_factor) + "_" + str(annealing_time) + '_TEST.csv'
    else:
        file_name = instance + '_annealing_c' + \
            str(chain_factor) + "_" + str(annealing_time) + '.csv'
    
    file_name = os.path.join(results_path, file_name)

    if instance == 'ExMIRPg1':
        # QUBO getters for various formulations
        qubo_getters = dict()
        qubo_getters['route'] = getQUBOPBg1
        qubo_getters['seq'] = getQUBOSBg1
        qubo_getters['arc'] = getQUBOABg1


        best_embeddings = dict()
        best_embeddings['route'] = {0: [255, 247], 3: [252, 240, 244], 4: [508, 504, 248, 376], 5: [242, 253, 245], 7: [249, 377, 505], 8: [
            369, 254, 246, 241], 9: [251, 382, 379], 10: [243, 371, 383, 375], 1: [250, 378], 6: [368, 370, 380, 372], 2: [381, 373]}
        best_embeddings['seq'] = {0: [1371, 1243], 1: [1235, 1245, 1237], 2: [1241, 1372, 1369], 3: [1232, 1360, 1375, 1367], 5: [1228, 1244, 1236], 6: [1247, 1370, 1242], 7: [1234, 1246, 1238], 4: [1240, 1368], 9: [
            1361, 1233, 1231, 1239], 13: [1352, 1229, 1224], 10: [1358, 1374, 1366], 14: [1363, 1357, 1373, 1365], 11: [1230, 1359, 1353, 1225], 15: [1362, 1356, 1364], 8: [1226, 1354], 12: [1227, 1355]}
        best_embeddings['arc'] = {0: [1372, 1758, 2008, 1880, 1752, 1368, 1496, 1624], 1: [2034, 2025, 2033, 2024, 2004, 2012, 2020, 2036, 2028], 2: [1887, 1619, 1747, 1879, 2003, 1875], 3: [1748, 1756, 2009, 1881, 1753], 4: [1908, 1900, 1876, 1884, 2018, 1890, 1892], 5: [2010, 1882, 1626, 1754], 6: [2026, 2031, 2007, 2023, 2015], 7: [1886, 1878, 1616, 2000, 1744, 1872], 8: [2019, 1891, 1877, 1885, 1893], 9: [2017, 2022, 2006, 2014], 21: [1504, 1380, 1376], 22: [1498, 1509, 1501], 23: [1497, 1510, 1502], 27: [1790, 1782, 1774, 1508, 1505, 1633, 1761, 1766], 28: [2046, 2038, 2030, 2027, 1899, 1503, 1511, 1519, 1515, 1643, 1771], 30: [1499, 1371, 1405, 1397, 1249, 1377, 1389, 1373, 1381], 31: [1240, 1245, 1277, 1269, 1506, 1378, 1261, 1253, 1250], 38: [1623, 1773, 2001, 1873, 1617, 1745, 1765, 1757, 1749], 39: [1775, 1767, 1759, 2002, 1874, 1746, 1751], 40: [2045, 2005, 2013, 2021, 2037, 2029], 45: [2011, 1883, 1755, 1627, 1655, 1647, 1639, 1631], 24: [
            1901, 1909, 1905], 25: [1897, 1911, 1903], 29: [1902, 1779, 1918, 1910, 2035, 1907], 32: [1527, 1906, 1778, 1266, 1394, 1522, 1650], 33: [1896, 1768, 1640, 1534, 1526, 1256, 1384, 1512, 1518], 26: [1618, 1620, 1628], 34: [1622, 1630, 1638, 1646, 1654, 1662, 1275, 1403, 1531, 1659], 10: [1764, 1770, 1788, 1780, 1772], 11: [1787, 2043, 1917, 1915], 12: [1916, 2040, 1784, 1912], 13: [1919, 1785, 2041, 1913], 35: [1762, 1637, 1634], 36: [1636, 1760, 1632], 41: [1251, 1763, 1635, 1507, 1379, 1406, 1398, 1390, 1382], 42: [1391, 1661, 1257, 1385, 1644, 1769, 1653, 1645, 1641, 1513], 37: [2032, 2047, 2039], 43: [2042, 1274, 1402, 1530, 1652, 1660, 1658, 1786, 1914], 14: [1396, 1651, 1267, 1395, 1523], 15: [1252, 1276, 1259, 1268, 1260], 16: [1524, 1265, 1393, 1649, 1521], 17: [1278, 1254, 1262, 1270], 18: [1264, 1648, 1520, 1392], 19: [1248, 1279, 1255, 1271, 1263], 20: [1528, 1399, 1272, 1400, 1407], 44: [1642, 1386, 1514, 1525, 1517]}

        full_embeddings = dict()
        full_embeddings['route'] = {0: [692, 688, 816], 1: [693, 689, 817], 2: [694, 690, 818], 3: [695, 691, 819], 4: [820, 828, 824], 5: [821, 829, 825], 6: [822, 830, 826]}
        full_embeddings['seq'] = {0: [2020, 2016, 1888, 1760, 1632, 1504, 1376, 1248, 1120, 992, 864, 736, 608, 480, 352], 1: [2021, 2017, 1889, 1761, 1633, 1505, 1377, 1249, 1121, 993, 865, 737, 609, 481, 353], 2: [2022, 2018, 1890, 1762, 1634, 1506, 1378, 1250, 1122, 994, 866, 738, 610, 482, 354], 3: [2023, 2019, 1891, 1763, 1635, 1507, 1379, 1251, 1123, 995, 867, 739, 611, 483, 355], 4: [356, 364, 360, 488, 616, 744, 872, 1000, 1128, 1256, 1384, 1512, 1640, 1768, 1896], 5: [357, 365, 361, 489, 617, 745, 873, 1001, 1129, 1257, 1385, 1513, 1641, 1769, 1897], 6: [358, 366, 362, 490, 618, 746, 874, 1002, 1130, 1258, 1386, 1514, 1642, 1770, 1898], 7: [359, 367, 363, 491, 619, 747, 875, 1003, 1131, 1259, 1387, 1515, 1643, 1771, 1899], 8: [492, 484, 476, 472, 600, 728, 856, 984, 1112, 1240, 1368, 1496, 1624, 1752, 1880], 9: [493, 485, 477, 473, 601, 729, 857, 985, 1113, 1241, 1369, 1497, 1625, 1753, 1881], 10: [494, 486, 478, 474, 602, 730, 858, 986, 1114, 1242, 1370, 1498, 1626, 1754, 1882], 11: [495, 487, 479, 475, 603, 731, 859, 987, 1115, 1243, 1371, 1499, 1627, 1755, 1883], 12: [604, 612, 620, 628, 624, 752, 880, 1008, 1136, 1264, 1392, 1520, 1648, 1776, 1904], 13: [605, 613, 621, 629, 625, 753, 881, 1009, 1137, 1265, 1393, 1521, 1649, 1777, 1905], 14: [606, 614, 622, 630, 626, 754, 882, 1010, 1138, 1266, 1394, 1522, 1650, 1778, 1906], 15: [607, 615, 623, 631, 627, 755, 883, 1011, 1139, 1267, 1395, 1523, 1651, 1779, 1907], 16: [1884, 1892, 1900, 1908, 1916, 1912, 1784, 1656, 1528, 1400, 1272, 1144, 1016, 888, 760], 17: [1885, 1893, 1901, 1909, 1917, 1913, 1785, 1657, 1529, 1401, 1273, 1145, 1017, 889, 761], 18: [1886, 1894, 1902, 1910, 1918, 1914, 1786, 1658, 1530, 1402, 1274, 1146, 1018, 890, 762], 19: [1887, 1895, 1903, 1911, 1919, 1915, 1787, 1659, 1531, 1403, 1275, 1147, 1019, 891, 763], 20: [1788, 1780, 1772, 1764, 1756, 1748, 1744, 1616, 1488, 1360, 1232, 1104, 976, 848, 720], 21: [1789, 1781, 1773, 1765, 1757, 1749, 1745, 1617, 1489, 1361, 1233, 1105, 977, 849, 721], 22: [1790, 1782, 1774, 1766, 1758, 1750, 1746, 1618, 1490, 1362, 1234, 1106, 978, 850, 722], 23: [1791, 1783, 1775, 1767, 1759, 1751, 1747, 1619, 1491, 1363, 1235, 1107, 979, 851, 723], 24: [1660, 1652, 1644, 1636, 1628, 1620, 1612, 1608, 1480, 1352, 1224, 1096, 968, 840, 712], 25: [1661, 1653, 1645, 1637, 1629, 1621, 1613, 1609, 1481, 1353, 1225, 1097, 969, 841, 713], 26: [1662, 1654, 1646, 1638, 1630, 1622, 1614, 1610, 1482, 1354, 1226, 1098, 970, 842, 714], 27: [1663, 1655, 1647, 1639, 1631, 1623, 1615, 1611, 1483, 1355, 1227, 1099, 971, 843, 715], 28: [1532, 1524, 1516, 1508, 1500, 1492, 1484, 1476, 1472, 1344, 1216, 1088, 960, 832, 704], 29: [1533, 1525, 1517, 1509, 1501, 1493, 1485, 1477, 1473, 1345, 1217, 1089, 961, 833, 705], 30: [1534, 1526, 1518, 1510, 1502, 1494, 1486, 1478, 1474, 1346, 1218, 1090, 962, 834, 706], 31: [1535, 1527, 1519, 1511, 1503, 1495, 1487, 1479, 1475, 1347, 1219, 1091, 963, 835, 707], 32: [764, 756, 748, 740, 732, 724, 716, 708, 700, 696, 824, 952, 1080, 1208, 1336], 33: [765, 757, 749, 741, 733, 725, 717, 709, 701, 697, 825, 953, 1081, 1209, 1337], 34: [766, 758, 750, 742, 734, 726, 718, 710, 702, 698, 826, 954, 1082, 1210, 1338], 35: [767, 759, 751, 743, 735, 727, 719, 711, 703, 699, 827, 955, 1083, 1211, 1339], 36: [1404, 1396, 1388, 1380, 1372, 1364, 1356, 1348, 1340, 1332, 1328, 1200, 1072, 944, 816], 37: [1405, 1397, 1389, 1381, 1373, 1365, 1357, 1349, 1341, 1333, 1329, 1201, 1073, 945, 817], 38: [1406, 1398, 1390, 1382, 1374, 1366, 1358, 1350, 1342, 1334, 1330, 1202, 1074, 946, 818], 39: [1407, 1399, 1391, 1383, 1375, 1367, 1359, 1351, 1343, 1335, 1331, 1203, 1075, 947, 819], 40: [1276, 1268, 1260, 1252, 1244, 1236, 1228, 1220, 1212, 1204, 1196, 1192, 1064, 936, 808], 41: [1277, 1269, 1261, 1253, 1245, 1237, 1229, 1221, 1213, 1205, 1197, 1193, 1065, 937, 809], 42: [1278, 1270, 1262, 1254, 1246, 1238, 1230, 1222, 1214, 1206, 1198, 1194, 1066, 938, 810], 43: [1279, 1271, 1263, 1255, 1247, 1239, 1231, 1223, 1215, 1207, 1199, 1195, 1067, 939, 811], 44: [892, 884, 876, 868, 860, 852, 844, 836, 828, 820, 812, 804, 800, 928, 1056], 45: [893, 885, 877, 869, 861, 853, 845, 837, 829, 821, 813, 805, 801, 929, 1057], 46: [894, 886, 878, 870, 862, 854, 846, 838, 830, 822, 814, 806, 802, 930, 1058], 47: [895, 887, 879, 871, 863, 855, 847, 839, 831, 823, 815, 807, 803, 931, 1059], 48: [1148, 1140, 1132, 1124, 1116, 1108, 1100, 1092, 1084, 1076, 1068, 1060, 1052, 1048, 920], 49: [1149, 1141, 1133, 1125, 1117, 1109, 1101, 1093, 1085, 1077, 1069, 1061, 1053, 1049, 921], 50: [1150, 1142, 1134, 1126, 1118, 1110, 1102, 1094, 1086, 1078, 1070, 1062, 1054, 1050, 922], 51: [1151, 1143, 1135, 1127, 1119, 1111, 1103, 1095, 1087, 1079, 1071, 1063, 1055, 1051, 923], 52: [1020, 1012, 1004, 996, 988, 980, 972, 964, 956, 948, 940, 932, 924, 916, 912], 53: [1021, 1013, 1005, 997, 989, 981, 973, 965, 957, 949, 941, 933, 925, 917, 913], 54: [1022, 1014, 1006, 998, 990, 982, 974, 966, 958, 950, 942, 934, 926, 918, 914], 55: [1023, 1015, 1007, 999, 991, 983, 975, 967, 959, 951, 943, 935, 927, 919, 915]}
        

        opt_energies = dict()
        opt_energies['seq'] = [0]
        opt_energies['route'] = [0]
        opt_energies['arc'] = [0]

        feas_energies = dict()
        feas_energies['seq'] = [0]
        feas_energies['route'] = [0]
        feas_energies['arc'] = [0]

    elif instance == 'ExSmall':
        # QUBO getters for various formulations
        qubo_getters = dict()
        qubo_getters['route'] = getQUBOPB
        qubo_getters['seq'] = getQUBOSB
        qubo_getters['arc'] = getQUBOAB

        best_embeddings = dict()
        best_embeddings['route'] = {0: [255, 247], 3: [252, 240, 244], 4: [508, 504, 248, 376], 5: [242, 253, 245], 7: [249, 377, 505], 8: [
            369, 254, 246, 241], 9: [251, 382, 379], 10: [243, 371, 383, 375], 1: [250, 378], 6: [368, 370, 380, 372], 2: [381, 373]}
        best_embeddings['seq'] = {0: [1371, 1243], 1: [1235, 1245, 1237], 2: [1241, 1372, 1369], 3: [1232, 1360, 1375, 1367], 5: [1228, 1244, 1236], 6: [1247, 1370, 1242], 7: [1234, 1246, 1238], 4: [1240, 1368], 9: [
            1361, 1233, 1231, 1239], 13: [1352, 1229, 1224], 10: [1358, 1374, 1366], 14: [1363, 1357, 1373, 1365], 11: [1230, 1359, 1353, 1225], 15: [1362, 1356, 1364], 8: [1226, 1354], 12: [1227, 1355]}
        best_embeddings['arc'] = {0: [1372, 1758, 2008, 1880, 1752, 1368, 1496, 1624], 1: [2034, 2025, 2033, 2024, 2004, 2012, 2020, 2036, 2028], 2: [1887, 1619, 1747, 1879, 2003, 1875], 3: [1748, 1756, 2009, 1881, 1753], 4: [1908, 1900, 1876, 1884, 2018, 1890, 1892], 5: [2010, 1882, 1626, 1754], 6: [2026, 2031, 2007, 2023, 2015], 7: [1886, 1878, 1616, 2000, 1744, 1872], 8: [2019, 1891, 1877, 1885, 1893], 9: [2017, 2022, 2006, 2014], 21: [1504, 1380, 1376], 22: [1498, 1509, 1501], 23: [1497, 1510, 1502], 27: [1790, 1782, 1774, 1508, 1505, 1633, 1761, 1766], 28: [2046, 2038, 2030, 2027, 1899, 1503, 1511, 1519, 1515, 1643, 1771], 30: [1499, 1371, 1405, 1397, 1249, 1377, 1389, 1373, 1381], 31: [1240, 1245, 1277, 1269, 1506, 1378, 1261, 1253, 1250], 38: [1623, 1773, 2001, 1873, 1617, 1745, 1765, 1757, 1749], 39: [1775, 1767, 1759, 2002, 1874, 1746, 1751], 40: [2045, 2005, 2013, 2021, 2037, 2029], 45: [2011, 1883, 1755, 1627, 1655, 1647, 1639, 1631], 24: [
            1901, 1909, 1905], 25: [1897, 1911, 1903], 29: [1902, 1779, 1918, 1910, 2035, 1907], 32: [1527, 1906, 1778, 1266, 1394, 1522, 1650], 33: [1896, 1768, 1640, 1534, 1526, 1256, 1384, 1512, 1518], 26: [1618, 1620, 1628], 34: [1622, 1630, 1638, 1646, 1654, 1662, 1275, 1403, 1531, 1659], 10: [1764, 1770, 1788, 1780, 1772], 11: [1787, 2043, 1917, 1915], 12: [1916, 2040, 1784, 1912], 13: [1919, 1785, 2041, 1913], 35: [1762, 1637, 1634], 36: [1636, 1760, 1632], 41: [1251, 1763, 1635, 1507, 1379, 1406, 1398, 1390, 1382], 42: [1391, 1661, 1257, 1385, 1644, 1769, 1653, 1645, 1641, 1513], 37: [2032, 2047, 2039], 43: [2042, 1274, 1402, 1530, 1652, 1660, 1658, 1786, 1914], 14: [1396, 1651, 1267, 1395, 1523], 15: [1252, 1276, 1259, 1268, 1260], 16: [1524, 1265, 1393, 1649, 1521], 17: [1278, 1254, 1262, 1270], 18: [1264, 1648, 1520, 1392], 19: [1248, 1279, 1255, 1271, 1263], 20: [1528, 1399, 1272, 1400, 1407], 44: [1642, 1386, 1514, 1525, 1517]}


        full_embeddings = dict()
        full_embeddings['route'] = {0: [1524, 1520, 1648, 1776], 1: [1525, 1521, 1649, 1777], 2: [1526, 1522, 1650, 1778], 3: [1527, 1523, 1651, 1779], 4: [1780, 1772, 1768, 1640], 5: [1781, 1773, 1769, 1641], 6: [1782, 1774, 1770, 1642], 7: [1783, 1775, 1771, 1643], 8: [1652, 1644, 1636, 1632], 9: [1653, 1645, 1637, 1633], 10: [1654, 1646, 1638, 1634]}
        full_embeddings['seq'] = {0: [1796, 1792, 1664, 1536, 1408], 1: [1797, 1793, 1665, 1537, 1409], 2: [1798, 1794, 1666, 1538, 1410], 3: [1799, 1795, 1667, 1539, 1411], 4: [1668, 1676, 1672, 1544, 1416], 5: [1669, 1677, 1673, 1545, 1417], 6: [1670, 1678, 1674, 1546, 1418], 7: [1671, 1679, 1675, 1547, 1419], 8: [
            1540, 1548, 1556, 1552, 1424], 9: [1541, 1549, 1557, 1553, 1425], 10: [1542, 1550, 1558, 1554, 1426], 11: [1543, 1551, 1559, 1555, 1427], 12: [1412, 1420, 1428, 1436, 1432], 13: [1413, 1421, 1429, 1437, 1433], 14: [1414, 1422, 1430, 1438, 1434], 15: [1415, 1423, 1431, 1439, 1435]}
        full_embeddings['arc'] = {0: [2012, 2008, 1880, 1752, 1624, 1496, 1368, 1240, 1112, 984, 856, 728, 600], 1: [2013, 2009, 1881, 1753, 1625, 1497, 1369, 1241, 1113, 985, 857, 729, 601], 2: [2014, 2010, 1882, 1754, 1626, 1498, 1370, 1242, 1114, 986, 858, 730, 602], 3: [2015, 2011, 1883, 1755, 1627, 1499, 1371, 1243, 1115, 987, 859, 731, 603], 4: [604, 596, 592, 720, 848, 976, 1104, 1232, 1360, 1488, 1616, 1744, 1872], 5: [605, 597, 593, 721, 849, 977, 1105, 1233, 1361, 1489, 1617, 1745, 1873], 6: [606, 598, 594, 722, 850, 978, 1106, 1234, 1362, 1490, 1618, 1746, 1874], 7: [607, 599, 595, 723, 851, 979, 1107, 1235, 1363, 1491, 1619, 1747, 1875], 8: [724, 732, 740, 736, 864, 992, 1120, 1248, 1376, 1504, 1632, 1760, 1888], 9: [725, 733, 741, 737, 865, 993, 1121, 1249, 1377, 1505, 1633, 1761, 1889], 10: [726, 734, 742, 738, 866, 994, 1122, 1250, 1378, 1506, 1634, 1762, 1890], 11: [727, 735, 743, 739, 867, 995, 1123, 1251, 1379, 1507, 1635, 1763, 1891], 12: [852, 860, 868, 876, 872, 1000, 1128, 1256, 1384, 1512, 1640, 1768, 1896], 13: [853, 861, 869, 877, 873, 1001, 1129, 1257, 1385, 1513, 1641, 1769, 1897], 14: [854, 862, 870, 878, 874, 1002, 1130, 1258, 1386, 1514, 1642, 1770, 1898], 15: [855, 863, 871, 879, 875, 1003, 1131, 1259, 1387, 1515, 1643, 1771, 1899], 16: [980, 988, 996, 1004, 1012, 1008, 1136, 1264, 1392, 1520, 1648, 1776, 1904], 17: [981, 989, 997, 1005, 1013, 1009, 1137, 1265, 1393, 1521, 1649, 1777, 1905], 18: [982, 990, 998, 1006, 1014, 1010, 1138, 1266, 1394, 1522, 1650, 1778, 1906], 19: [983, 991, 999, 1007, 1015, 1011, 1139, 1267, 1395, 1523, 1651, 1779, 1907], 20: [1876, 1884, 1892, 1900, 1908, 1916, 1912, 1784, 1656, 1528, 1400, 1272, 1144], 21: [1877, 1885, 1893, 1901, 1909, 1917, 1913, 1785, 1657, 1529, 1401, 1273, 1145], 22: [1878, 1886, 1894, 1902, 1910, 1918, 1914, 1786, 1658, 1530, 1402, 1274, 1146], 23: [1879, 1887, 1895, 1903, 1911, 1919,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         1915, 1787, 1659, 1531, 1403, 1275, 1147], 24: [1788, 1780, 1772, 1764, 1756, 1748, 1740, 1736, 1608, 1480, 1352, 1224, 1096], 25: [1789, 1781, 1773, 1765, 1757, 1749, 1741, 1737, 1609, 1481, 1353, 1225, 1097], 26: [1790, 1782, 1774, 1766, 1758, 1750, 1742, 1738, 1610, 1482, 1354, 1226, 1098], 27: [1791, 1783, 1775, 1767, 1759, 1751, 1743, 1739, 1611, 1483, 1355, 1227, 1099], 28: [1148, 1140, 1132, 1124, 1116, 1108, 1100, 1092, 1088, 1216, 1344, 1472, 1600], 29: [1149, 1141, 1133, 1125, 1117, 1109, 1101, 1093, 1089, 1217, 1345, 1473, 1601], 30: [1150, 1142, 1134, 1126, 1118, 1110, 1102, 1094, 1090, 1218, 1346, 1474, 1602], 31: [1151, 1143, 1135, 1127, 1119, 1111, 1103, 1095, 1091, 1219, 1347, 1475, 1603], 32: [1276, 1268, 1260, 1252, 1244, 1236, 1228, 1220, 1212, 1208, 1336, 1464, 1592], 33: [1277, 1269, 1261, 1253, 1245, 1237, 1229, 1221, 1213, 1209, 1337, 1465, 1593], 34: [1278, 1270, 1262, 1254, 1246, 1238, 1230, 1222, 1214, 1210, 1338, 1466, 1594], 35: [1279, 1271, 1263, 1255, 1247, 1239, 1231, 1223, 1215, 1211, 1339, 1467, 1595], 36: [1660, 1652, 1644, 1636, 1628, 1620, 1612, 1604, 1596, 1588, 1584, 1456, 1328], 37: [1661, 1653, 1645, 1637, 1629, 1621, 1613, 1605, 1597, 1589, 1585, 1457, 1329], 38: [1662, 1654, 1646, 1638, 1630, 1622, 1614, 1606, 1598, 1590, 1586, 1458, 1330], 39: [1663, 1655, 1647, 1639, 1631, 1623, 1615, 1607, 1599, 1591, 1587, 1459, 1331], 40: [1404, 1396, 1388, 1380, 1372, 1364, 1356, 1348, 1340, 1332, 1324, 1320, 1448], 41: [1405, 1397, 1389, 1381, 1373, 1365, 1357, 1349, 1341, 1333, 1325, 1321, 1449], 42: [1406, 1398, 1390, 1382, 1374, 1366, 1358, 1350, 1342, 1334, 1326, 1322, 1450], 43: [1407, 1399, 1391, 1383, 1375, 1367, 1359, 1351, 1343, 1335, 1327, 1323, 1451], 44: [1532, 1524, 1516, 1508, 1500, 1492, 1484, 1476, 1468, 1460, 1452, 1444, 1440], 45: [1533, 1525, 1517, 1509, 1501, 1493, 1485, 1477, 1469, 1461, 1453, 1445, 1441]}

        opt_energies = dict()
        opt_energies['seq'] = [7]
        opt_energies['route'] = [5]
        opt_energies['arc'] = [5]

        feas_energies = dict()
        feas_energies['seq'] = [7, 8]
        feas_energies['route'] = [5, 6, 7, 8, 10]
        feas_energies['arc'] = [5, 7, 8, 10]


    # time horizons and time limit in seconds
    if TEST:
        random.seed(1)
        # Define samplers: exact, simulated annealing and Dwave (with automatic embedding)
        samplers = dict()
        samplers['exact'] = dimod.reference.samplers.ExactSolver()
        samplers['simann'] = neal.SimulatedAnnealingSampler()
        samplers['dwave_embed'] = EmbeddingComposite(DWaveSampler())
        best_embed = False
        full_embed = False
        overwrite_pickles = False
        # Number of anneals performed
        samples = 100
    else:
        random.seed(0)
        # Define samplers: exact, simulated annealing and Dwave (with automatic embedding)
        samplers = dict()
        samplers['exact'] = dimod.reference.samplers.ExactSolver()
        samplers['simann'] = neal.SimulatedAnnealingSampler()
        samplers['dwave_embed'] = EmbeddingComposite(DWaveSampler())
        best_embed = True
        full_embed = True
        overwrite_pickles = False
        # Number of anneals performed
        samples = 8196//2
    
    columns = ['formulation', 'build_time', 'chain_strength',
                'embedding', 'best_embedding']
    results = pd.DataFrame(columns=columns)

    for name, getter in qubo_getters.items():

        print("**********************************************")
        print("Formulation: {}".format(name))
        temp = dict()

        # Identification
        temp['formulation'] = name

        start = time.time()
        if instance == "ExSmall":
            q, c = getter(feasibility=False)
        elif instance == 'ExMIRPg1':
            q, c = getter(TimeHorizon=15, feasibility=False)
        temp['build_time'] = time.time() - start

        if type(q) is np.ndarray:
            Q = q
        else:
            Q = q.todense()

        bqm = dimod.BinaryQuadraticModel.from_qubo(Q, offset=c)
        edges = list(itertools.chain(bqm.quadratic, ((v, v)
                                                        for v in bqm.linear)))
        
        chain_strength = max(Q.min(), Q.max(), key=abs)*chain_factor
        temp['chain_strength'] = chain_strength

        # Add fixed embedding sampler if allowed
        if best_embed:
            samplers['dwave'] = FixedEmbeddingComposite(
                DWaveSampler(), embedding=best_embeddings[name])

        # Add fixed embedding sampler if allowed
        if full_embed:
            samplers['dwave_full'] = FixedEmbeddingComposite(
                DWaveSampler(), embedding=full_embeddings[name])
        
        pickle_path = os.path.join(results_path, 'pickle/')
        if not(os.path.exists(pickle_path)):
            print('Pickled results directory ' + pickle_path +
                ' does not exist. We will create it.')
            os.makedirs(pickle_path)
        
        for kind, sampler in samplers.items():
            pickle_name = instance + "_" + name + "_" + kind + "_" + str(chain_factor) + "_" + str(annealing_time) + ".p"
            pickle_name = os.path.join(pickle_path, pickle_name)
            if os.path.exists(pickle_name) and not overwrite_pickles:
                response = pickle.load(open(pickle_name, "rb"))
            else:
                if kind is "exact":
                    if len(Q) < 17:
                        start = time.time()
                        response = sampler.sample(bqm)
                        temp['run_time_' + kind] = time.time() - start
                    else:
                        continue
                else:
                    start = time.time()
                    # This is where the magic happens
                    response = sampler.sample(
                        bqm, num_reads=samples, return_embedding=True, chain_strength=chain_strength, annealing_time=annealing_time)
                    temp['run_time_' + kind] = time.time() - start
                
                pickle.dump(response, open(pickle_name, "wb"))

            if 'chain_break_fraction' in response.record.dtype.names:
                temp['chain_break_fraction_' + kind + '_avg'] = np.mean(response.record.chain_break_fraction)

                temp['chain_break_fraction_' + kind + '_std'] = np.std(response.record.chain_break_fraction)
            
            if 'embedding_context' in response.info.keys():
                temp['embedding_' +
                     kind] = response.info['embedding_context']['embedding']
                print(response.info['timing'])
            
            energies=response.data_vectors['energy']
            occurrences=response.data_vectors['num_occurrences']

            counts={}
            for index, energy in enumerate(energies):
                if energy in counts.keys():
                    counts[energy] += occurrences[index]
                else:
                    counts[energy]=occurrences[index]

            total_counts=sum(occurrences)
            temp['opt_fraction_' + kind] = sum(counts[key] for key in opt_energies[
                                               name] if key in counts.keys())/total_counts
            temp['feas_fraction_' + kind] = sum(
                counts[key] for key in feas_energies[name] if key in counts.keys())/total_counts
            
        results = results.append(temp, ignore_index=True)

        results.to_csv(file_name)


if __name__ == "__main__":
    annealing()
